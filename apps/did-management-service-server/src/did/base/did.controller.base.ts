/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DidService } from "../did.service";
import { DidCreateInput } from "./DidCreateInput";
import { Did } from "./Did";
import { DidFindManyArgs } from "./DidFindManyArgs";
import { DidWhereUniqueInput } from "./DidWhereUniqueInput";
import { DidUpdateInput } from "./DidUpdateInput";
import { CredentialFindManyArgs } from "../../credential/base/CredentialFindManyArgs";
import { Credential } from "../../credential/base/Credential";
import { CredentialWhereUniqueInput } from "../../credential/base/CredentialWhereUniqueInput";

export class DidControllerBase {
  constructor(protected readonly service: DidService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Did })
  async createDid(@common.Body() data: DidCreateInput): Promise<Did> {
    return await this.service.createDid({
      data: data,
      select: {
        createdAt: true,
        document: true,
        id: true,
        identifier: true,
        metadata: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Did] })
  @ApiNestedQuery(DidFindManyArgs)
  async dids(@common.Req() request: Request): Promise<Did[]> {
    const args = plainToClass(DidFindManyArgs, request.query);
    return this.service.dids({
      ...args,
      select: {
        createdAt: true,
        document: true,
        id: true,
        identifier: true,
        metadata: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Did })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async did(@common.Param() params: DidWhereUniqueInput): Promise<Did | null> {
    const result = await this.service.did({
      where: params,
      select: {
        createdAt: true,
        document: true,
        id: true,
        identifier: true,
        metadata: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Did })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDid(
    @common.Param() params: DidWhereUniqueInput,
    @common.Body() data: DidUpdateInput
  ): Promise<Did | null> {
    try {
      return await this.service.updateDid({
        where: params,
        data: data,
        select: {
          createdAt: true,
          document: true,
          id: true,
          identifier: true,
          metadata: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Did })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDid(
    @common.Param() params: DidWhereUniqueInput
  ): Promise<Did | null> {
    try {
      return await this.service.deleteDid({
        where: params,
        select: {
          createdAt: true,
          document: true,
          id: true,
          identifier: true,
          metadata: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/credentials")
  @ApiNestedQuery(CredentialFindManyArgs)
  async findCredentials(
    @common.Req() request: Request,
    @common.Param() params: DidWhereUniqueInput
  ): Promise<Credential[]> {
    const query = plainToClass(CredentialFindManyArgs, request.query);
    const results = await this.service.findCredentials(params.id, {
      ...query,
      select: {
        createdAt: true,

        did: {
          select: {
            id: true,
          },
        },

        expirationDate: true,
        id: true,
        issueDate: true,
        status: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/credentials")
  async connectCredentials(
    @common.Param() params: DidWhereUniqueInput,
    @common.Body() body: CredentialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      credentials: {
        connect: body,
      },
    };
    await this.service.updateDid({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/credentials")
  async updateCredentials(
    @common.Param() params: DidWhereUniqueInput,
    @common.Body() body: CredentialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      credentials: {
        set: body,
      },
    };
    await this.service.updateDid({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/credentials")
  async disconnectCredentials(
    @common.Param() params: DidWhereUniqueInput,
    @common.Body() body: CredentialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      credentials: {
        disconnect: body,
      },
    };
    await this.service.updateDid({
      where: params,
      data,
      select: { id: true },
    });
  }
}
