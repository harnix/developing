/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Did } from "./Did";
import { DidCountArgs } from "./DidCountArgs";
import { DidFindManyArgs } from "./DidFindManyArgs";
import { DidFindUniqueArgs } from "./DidFindUniqueArgs";
import { CreateDidArgs } from "./CreateDidArgs";
import { UpdateDidArgs } from "./UpdateDidArgs";
import { DeleteDidArgs } from "./DeleteDidArgs";
import { CredentialFindManyArgs } from "../../credential/base/CredentialFindManyArgs";
import { Credential } from "../../credential/base/Credential";
import { DidService } from "../did.service";
@graphql.Resolver(() => Did)
export class DidResolverBase {
  constructor(protected readonly service: DidService) {}

  async _didsMeta(
    @graphql.Args() args: DidCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Did])
  async dids(@graphql.Args() args: DidFindManyArgs): Promise<Did[]> {
    return this.service.dids(args);
  }

  @graphql.Query(() => Did, { nullable: true })
  async did(@graphql.Args() args: DidFindUniqueArgs): Promise<Did | null> {
    const result = await this.service.did(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Did)
  async createDid(@graphql.Args() args: CreateDidArgs): Promise<Did> {
    return await this.service.createDid({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Did)
  async updateDid(@graphql.Args() args: UpdateDidArgs): Promise<Did | null> {
    try {
      return await this.service.updateDid({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Did)
  async deleteDid(@graphql.Args() args: DeleteDidArgs): Promise<Did | null> {
    try {
      return await this.service.deleteDid(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Credential], { name: "credentials" })
  async findCredentials(
    @graphql.Parent() parent: Did,
    @graphql.Args() args: CredentialFindManyArgs
  ): Promise<Credential[]> {
    const results = await this.service.findCredentials(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
