/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Did as PrismaDid,
  Credential as PrismaCredential,
} from "@prisma/client";

export class DidServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DidCountArgs, "select">): Promise<number> {
    return this.prisma.did.count(args);
  }

  async dids(args: Prisma.DidFindManyArgs): Promise<PrismaDid[]> {
    return this.prisma.did.findMany(args);
  }
  async did(args: Prisma.DidFindUniqueArgs): Promise<PrismaDid | null> {
    return this.prisma.did.findUnique(args);
  }
  async createDid(args: Prisma.DidCreateArgs): Promise<PrismaDid> {
    return this.prisma.did.create(args);
  }
  async updateDid(args: Prisma.DidUpdateArgs): Promise<PrismaDid> {
    return this.prisma.did.update(args);
  }
  async deleteDid(args: Prisma.DidDeleteArgs): Promise<PrismaDid> {
    return this.prisma.did.delete(args);
  }

  async findCredentials(
    parentId: string,
    args: Prisma.CredentialFindManyArgs
  ): Promise<PrismaCredential[]> {
    return this.prisma.did
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .credentials(args);
  }
}
