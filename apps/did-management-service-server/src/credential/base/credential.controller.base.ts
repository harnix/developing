/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CredentialService } from "../credential.service";
import { CredentialCreateInput } from "./CredentialCreateInput";
import { Credential } from "./Credential";
import { CredentialFindManyArgs } from "./CredentialFindManyArgs";
import { CredentialWhereUniqueInput } from "./CredentialWhereUniqueInput";
import { CredentialUpdateInput } from "./CredentialUpdateInput";

export class CredentialControllerBase {
  constructor(protected readonly service: CredentialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Credential })
  async createCredential(
    @common.Body() data: CredentialCreateInput
  ): Promise<Credential> {
    return await this.service.createCredential({
      data: {
        ...data,

        did: data.did
          ? {
              connect: data.did,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        did: {
          select: {
            id: true,
          },
        },

        expirationDate: true,
        id: true,
        issueDate: true,
        status: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Credential] })
  @ApiNestedQuery(CredentialFindManyArgs)
  async credentials(@common.Req() request: Request): Promise<Credential[]> {
    const args = plainToClass(CredentialFindManyArgs, request.query);
    return this.service.credentials({
      ...args,
      select: {
        createdAt: true,

        did: {
          select: {
            id: true,
          },
        },

        expirationDate: true,
        id: true,
        issueDate: true,
        status: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Credential })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async credential(
    @common.Param() params: CredentialWhereUniqueInput
  ): Promise<Credential | null> {
    const result = await this.service.credential({
      where: params,
      select: {
        createdAt: true,

        did: {
          select: {
            id: true,
          },
        },

        expirationDate: true,
        id: true,
        issueDate: true,
        status: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Credential })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCredential(
    @common.Param() params: CredentialWhereUniqueInput,
    @common.Body() data: CredentialUpdateInput
  ): Promise<Credential | null> {
    try {
      return await this.service.updateCredential({
        where: params,
        data: {
          ...data,

          did: data.did
            ? {
                connect: data.did,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          did: {
            select: {
              id: true,
            },
          },

          expirationDate: true,
          id: true,
          issueDate: true,
          status: true,
          typeField: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Credential })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCredential(
    @common.Param() params: CredentialWhereUniqueInput
  ): Promise<Credential | null> {
    try {
      return await this.service.deleteCredential({
        where: params,
        select: {
          createdAt: true,

          did: {
            select: {
              id: true,
            },
          },

          expirationDate: true,
          id: true,
          issueDate: true,
          status: true,
          typeField: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
